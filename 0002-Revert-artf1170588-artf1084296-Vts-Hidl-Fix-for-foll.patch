From e96ab5cd24349045f491f55efe095d856ed4b981 Mon Sep 17 00:00:00 2001
From: "suryaprakash.konduru" <suryaprakash.konduru@nxp.com>
Date: Fri, 6 Sep 2024 10:15:53 +0530
Subject: [PATCH 02/18] Revert "[artf1170588][artf1084296][Vts][Hidl] Fix for
 following vts Nfc hidl issues"

This reverts commit 929d873cf4a833e3609e4a63ae6f6b6dfcd10da4.
---
 snxxx/1.1/Nfc.cpp | 12 ++++--------
 snxxx/1.1/Nfc.h   |  3 +--
 snxxx/1.2/Nfc.cpp | 14 +++++---------
 snxxx/1.2/Nfc.h   |  3 +--
 4 files changed, 11 insertions(+), 21 deletions(-)

diff --git a/snxxx/1.1/Nfc.cpp b/snxxx/1.1/Nfc.cpp
index dd591fc5..69f969ce 100644
--- a/snxxx/1.1/Nfc.cpp
+++ b/snxxx/1.1/Nfc.cpp
@@ -54,10 +54,6 @@ Return<V1_0::NfcStatus> Nfc::open_1_1(
 // Methods from ::android::hardware::nfc::V1_0::INfc follow.
 Return<V1_0::NfcStatus> Nfc::open(
     const sp<V1_0::INfcClientCallback>& clientCallback) {
-  if (mIsServiceStarted) {
-    ALOGD_IF(nfc_debug_enabled, "Nfc::open service is already started");
-    return V1_0::NfcStatus::OK;
-  }
   ALOGD_IF(nfc_debug_enabled, "Nfc::open Enter");
   if (clientCallback == nullptr) {
     ALOGD_IF(nfc_debug_enabled, "Nfc::open null callback");
@@ -68,7 +64,6 @@ Return<V1_0::NfcStatus> Nfc::open(
   }
 
   NFCSTATUS status = phNxpNciHal_open(eventCallback, dataCallback);
-  mIsServiceStarted = true;
   ALOGD_IF(nfc_debug_enabled, "Nfc::open Exit");
   return CHK_STATUS(status);
 }
@@ -84,14 +79,16 @@ Return<V1_0::NfcStatus> Nfc::coreInitialized(const hidl_vec<uint8_t>& data) {
   return CHK_STATUS(status);
 }
 
-Return<V1_0::NfcStatus> Nfc::prediscover() { return V1_0::NfcStatus::OK; }
+Return<V1_0::NfcStatus> Nfc::prediscover() {
+  NFCSTATUS status = phNxpNciHal_pre_discover();
+  return CHK_STATUS(status);
+}
 
 Return<V1_0::NfcStatus> Nfc::close() {
   if (mCallbackV1_1 == nullptr && mCallbackV1_0 == nullptr) {
     return V1_0::NfcStatus::FAILED;
   }
   NFCSTATUS status = phNxpNciHal_close(false);
-  mIsServiceStarted = false;
 
   if (mCallbackV1_1 != nullptr) {
     mCallbackV1_1->unlinkToDeath(this);
@@ -125,7 +122,6 @@ Return<V1_0::NfcStatus> Nfc::closeForPowerOffCase() {
     return V1_0::NfcStatus::FAILED;
   }
   NFCSTATUS status = phNxpNciHal_configDiscShutdown();
-  mIsServiceStarted = false;
 
   if (mCallbackV1_1 != nullptr) {
     mCallbackV1_1->unlinkToDeath(this);
diff --git a/snxxx/1.1/Nfc.h b/snxxx/1.1/Nfc.h
index fb4248c6..ef467def 100644
--- a/snxxx/1.1/Nfc.h
+++ b/snxxx/1.1/Nfc.h
@@ -1,6 +1,6 @@
 /******************************************************************************
  *
- *  Copyright 2018,2023 NXP
+ *  Copyright 2018 NXP
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -99,7 +99,6 @@ struct Nfc : public V1_1::INfc, public hidl_death_recipient {
   }
 
  private:
-  bool mIsServiceStarted;
   static sp<V1_1::INfcClientCallback> mCallbackV1_1;
   static sp<V1_0::INfcClientCallback> mCallbackV1_0;
 };
diff --git a/snxxx/1.2/Nfc.cpp b/snxxx/1.2/Nfc.cpp
index bf1dc2a2..2e6778b8 100644
--- a/snxxx/1.2/Nfc.cpp
+++ b/snxxx/1.2/Nfc.cpp
@@ -56,10 +56,6 @@ Return<V1_0::NfcStatus> Nfc::open_1_1(
 // Methods from ::android::hardware::nfc::V1_0::INfc follow.
 Return<V1_0::NfcStatus> Nfc::open(
     const sp<V1_0::INfcClientCallback>& clientCallback) {
-  if (mIsServiceStarted) {
-    ALOGD_IF(nfc_debug_enabled, "Nfc::open service is already started");
-    return V1_0::NfcStatus::OK;
-  }
   ALOGD_IF(nfc_debug_enabled, "Nfc::open Enter");
   if (clientCallback == nullptr) {
     ALOGD_IF(nfc_debug_enabled, "Nfc::open null callback");
@@ -70,7 +66,6 @@ Return<V1_0::NfcStatus> Nfc::open(
   }
   printNfcMwVersion();
   NFCSTATUS status = phNxpNciHal_open(eventCallback, dataCallback);
-  mIsServiceStarted = true;
   ALOGD_IF(nfc_debug_enabled, "Nfc::open Exit");
   return CHK_STATUS(status);
 }
@@ -86,14 +81,16 @@ Return<V1_0::NfcStatus> Nfc::coreInitialized(const hidl_vec<uint8_t>& data) {
   return CHK_STATUS(status);
 }
 
-Return<V1_0::NfcStatus> Nfc::prediscover() { return V1_0::NfcStatus::OK; }
+Return<V1_0::NfcStatus> Nfc::prediscover() {
+  NFCSTATUS status = phNxpNciHal_pre_discover();
+  return CHK_STATUS(status);
+}
 
 Return<V1_0::NfcStatus> Nfc::close() {
   if (mCallbackV1_1 == nullptr && mCallbackV1_0 == nullptr) {
     return V1_0::NfcStatus::FAILED;
   }
   NFCSTATUS status = phNxpNciHal_close(false);
-  mIsServiceStarted = false;
 
   if (mCallbackV1_1 != nullptr) {
     mCallbackV1_1->unlinkToDeath(this);
@@ -127,7 +124,7 @@ Return<V1_0::NfcStatus> Nfc::closeForPowerOffCase() {
     return V1_0::NfcStatus::FAILED;
   }
   NFCSTATUS status = phNxpNciHal_configDiscShutdown();
-  mIsServiceStarted = false;
+
   if (mCallbackV1_1 != nullptr) {
     mCallbackV1_1->unlinkToDeath(this);
     mCallbackV1_1 = nullptr;
@@ -160,7 +157,6 @@ void Nfc::serviceDied(uint64_t /*cookie*/, const wp<IBase>& /*who*/) {
     return;
   }
   phNxpNciHal_close(true);
-  mIsServiceStarted = false;
 
   if (mCallbackV1_1 != nullptr) {
     mCallbackV1_1->unlinkToDeath(this);
diff --git a/snxxx/1.2/Nfc.h b/snxxx/1.2/Nfc.h
index 1bb29b89..1af7a145 100644
--- a/snxxx/1.2/Nfc.h
+++ b/snxxx/1.2/Nfc.h
@@ -1,6 +1,6 @@
 /******************************************************************************
  *
- *  Copyright 2019-2023 NXP
+ *  Copyright 2019-2022 NXP
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -101,7 +101,6 @@ struct Nfc : public V1_2::INfc, public hidl_death_recipient {
   virtual void serviceDied(uint64_t /*cookie*/, const wp<IBase>& /*who*/);
 
  private:
-  bool mIsServiceStarted;
   static sp<V1_1::INfcClientCallback> mCallbackV1_1;
   static sp<V1_0::INfcClientCallback> mCallbackV1_0;
 };
-- 
2.47.0

