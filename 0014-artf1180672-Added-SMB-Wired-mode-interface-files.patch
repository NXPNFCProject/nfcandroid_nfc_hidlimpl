From 569811e801db1016c0f046c02ef5aac727b337cb Mon Sep 17 00:00:00 2001
From: nxf77715 <shrivatsa.hande@nxp.com>
Date: Thu, 26 Sep 2024 22:35:41 +0530
Subject: [PATCH 14/18] [artf1180672]: Added SMB Wired mode interface files

- Added SMB wired mode interface files

Change-Id: I4832ba3b80bc635bfe0fd46bd91f9c55039a4cca
---
 snxxx/Android.bp                              |  1 +
 snxxx/aidl/main.cpp                           |  9 +-
 snxxx/halimpl/common/phNfcNciConstants.h      |  1 +
 snxxx/halimpl/hal/WiredSeService.h            | 70 ++++++++++++++
 snxxx/halimpl/hal/phNxpNciHal.cc              | 27 ++++++
 snxxx/halimpl/hal/phNxpNciHal_WiredSeIface.cc | 93 +++++++++++++++++++
 snxxx/halimpl/hal/phNxpNciHal_WiredSeIface.h  | 71 ++++++++++++++
 7 files changed, 271 insertions(+), 1 deletion(-)
 create mode 100755 snxxx/halimpl/hal/WiredSeService.h
 create mode 100644 snxxx/halimpl/hal/phNxpNciHal_WiredSeIface.cc
 create mode 100644 snxxx/halimpl/hal/phNxpNciHal_WiredSeIface.h

diff --git a/snxxx/Android.bp b/snxxx/Android.bp
index 87082339..da1d03d6 100644
--- a/snxxx/Android.bp
+++ b/snxxx/Android.bp
@@ -75,6 +75,7 @@ cc_library_shared {
         "halimpl/mifare/NxpMfcReader.cc",
         "halimpl/recovery/phNxpNciHal_Recovery.cc",
         "halimpl/hal/phNxpNciHal_PowerTrackerIface.cc",
+        "halimpl/hal/phNxpNciHal_WiredSeIface.cc",
     ],
 
     local_include_dirs: [
diff --git a/snxxx/aidl/main.cpp b/snxxx/aidl/main.cpp
index d219cd91..ce2e9e80 100644
--- a/snxxx/aidl/main.cpp
+++ b/snxxx/aidl/main.cpp
@@ -1,6 +1,6 @@
 /******************************************************************************
  *
- *  Copyright 2022 NXP
+ *  Copyright 2022, 2024 NXP
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -26,12 +26,15 @@
 #include "NxpNfc.h"
 #include "phNxpNciHal_Adaptation.h"
 #include "phNxpNciHal_Recovery.h"
+#include "phNxpNciHal_WiredSeIface.h"
 
 using ::aidl::android::hardware::nfc::Nfc;
 using ::aidl::vendor::nxp::nxpnfc_aidl::INxpNfc;
 using ::aidl::vendor::nxp::nxpnfc_aidl::NxpNfc;
 using namespace std;
 
+extern WiredSeHandle gWiredSeHandle;
+
 void startNxpNfcAidlService() {
   ALOGI("NXP NFC Extn Service is starting.");
   std::shared_ptr<NxpNfc> nxp_nfc_service = ndk::SharedRefBase::make<NxpNfc>();
@@ -62,6 +65,10 @@ int main() {
   phNxpNciHal_RecoverFWTearDown();
 #endif
   thread t1(startNxpNfcAidlService);
+  // Starts Wired SE HAL instance if platform supports
+  if (phNxpNciHal_WiredSeStart(&gWiredSeHandle) != NFCSTATUS_SUCCESS) {
+    ALOGE("Wired Se HAL Disabled");
+  }
   ABinderProcess_joinThreadPool();
   return 0;
 }
diff --git a/snxxx/halimpl/common/phNfcNciConstants.h b/snxxx/halimpl/common/phNfcNciConstants.h
index aa158cc5..ef12ac43 100644
--- a/snxxx/halimpl/common/phNfcNciConstants.h
+++ b/snxxx/halimpl/common/phNfcNciConstants.h
@@ -30,6 +30,7 @@
 #define RF_DISC_CMD_CONFIG_START_INDEX 4
 // RF tech mode and Disc Frequency values
 #define RF_DISC_CMD_EACH_CONFIG_LENGTH 2
+#define NFCEE_MODE_SET_CMD_MODE_INDEX 4
 
 /* Android Parameters */
 #define NCI_ANDROID_GET_CAPABILITY 0x00
diff --git a/snxxx/halimpl/hal/WiredSeService.h b/snxxx/halimpl/hal/WiredSeService.h
new file mode 100755
index 00000000..8efce01e
--- /dev/null
+++ b/snxxx/halimpl/hal/WiredSeService.h
@@ -0,0 +1,70 @@
+/******************************************************************************
+ *
+ *  Copyright 2024 NXP
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ ******************************************************************************/
+#pragma once
+
+#include <stdint.h>
+
+// Opaque WiredSe Service object.
+struct WiredSeService;
+
+typedef enum WiredSeEvtType {
+  NFC_STATE_CHANGE,
+  NFC_PKT_RECEIVED,
+  SENDING_HCI_PKT,
+  DISABLING_NFCEE,
+  NFC_EVT_UNKNOWN
+} WiredSeEvtType;
+
+typedef enum { NFC_ON, NFC_OFF, NFC_STATE_UNKNOWN } NfcState;
+
+typedef struct NfcPkt {
+  uint8_t* data;
+  uint16_t len;
+  NfcPkt() {
+    data = NULL;
+    len = 0;
+  }
+  // Constructor
+  NfcPkt(uint8_t* inData, uint16_t inLen) {
+    data = inData;
+    len = inLen;
+  }
+} NfcPkt;
+
+typedef union WiredSeEvtData {
+  NfcState nfcState;
+  NfcPkt nfcPkt;
+  // Default
+  WiredSeEvtData() {}
+  // For typecasting from NfcState to WiredSeEvtData
+  WiredSeEvtData(NfcState inNfcState) { nfcState = inNfcState; }
+  // For typecasting from NfcPkt to WiredSeEvtData
+  WiredSeEvtData(NfcPkt inNfcPkt) { nfcPkt = inNfcPkt; }
+
+} WiredSeEvtData;
+
+typedef struct WiredSeEvt {
+  WiredSeEvtType event;
+  WiredSeEvtData eventData;
+
+  WiredSeEvt() { event = NFC_EVT_UNKNOWN; }
+} WiredSeEvt;
+
+extern "C" int32_t WiredSeService_Start(WiredSeService** wiredSeService);
+extern "C" int32_t WiredSeService_DispatchEvent(WiredSeService* wiredSeService,
+                                                WiredSeEvt evt);
diff --git a/snxxx/halimpl/hal/phNxpNciHal.cc b/snxxx/halimpl/hal/phNxpNciHal.cc
index 87e4469c..d4037e2d 100644
--- a/snxxx/halimpl/hal/phNxpNciHal.cc
+++ b/snxxx/halimpl/hal/phNxpNciHal.cc
@@ -43,6 +43,7 @@
 #include "phNxpNciHal_PowerTrackerIface.h"
 #include "phNxpNciHal_ULPDet.h"
 #include "phNxpNciHal_VendorProp.h"
+#include "phNxpNciHal_WiredSeIface.h"
 #include "phNxpNciHal_extOperations.h"
 
 using android::base::StringPrintf;
@@ -57,6 +58,12 @@ using android::base::WriteStringToFile;
 #define NS_PER_S 1000000000
 #define MAX_WAIT_MS_FOR_RESET_NTF 1600
 #define INVALID_PARAM 0x09
+#define IS_HCI_PACKET(nciPkt) \
+  (nciPkt[NCI_GID_INDEX] == 0x01) && (nciPkt[NCI_OID_INDEX] == 0x00)
+#define IS_NFCEE_DISABLE(nciPkt)                                     \
+  (nciPkt[NCI_GID_INDEX] == 0x22 && nciPkt[NCI_OID_INDEX] == 0x01 && \
+   nciPkt[NCI_MSG_LEN_INDEX] == 0x02 &&                              \
+   nciPkt[NFCEE_MODE_SET_CMD_MODE_INDEX] == 0x00)
 
 bool bEnableMfcExtns = false;
 bool bEnableMfcReader = false;
@@ -121,6 +128,7 @@ uint8_t fw_dwnld_flag = false;
 #endif
 bool nfc_debug_enabled = true;
 PowerTrackerHandle gPowerTrackerHandle;
+WiredSeHandle gWiredSeHandle;
 sem_t sem_reset_ntf_received;
 /*  Used to send Callback Transceive data during Mifare Write.
  *  If this flag is enabled, no need to send response to Upper layer */
@@ -1148,6 +1156,15 @@ int phNxpNciHal_write(uint16_t data_len, const uint8_t* p_data) {
     NciDiscoveryCommandBuilder builder;
     vector<uint8_t> v_data = builder.reConfigRFDiscCmd(data_len, p_data);
     return phNxpNciHal_write_internal(v_data.size(), v_data.data());
+  } else if (IS_HCI_PACKET(p_data)) {
+    // Inform WiredSe service that HCI Pkt is sending from libnfc layer
+    phNxpNciHal_WiredSeDispatchEvent(&gWiredSeHandle, SENDING_HCI_PKT);
+  } else if (IS_NFCEE_DISABLE(p_data)) {
+    // NFCEE_MODE_SET(DISABLE) is called. Dispatch event to WiredSe so
+    // that it can close if session is ongoing on same NFCEE
+    phNxpNciHal_WiredSeDispatchEvent(
+        &gWiredSeHandle, DISABLING_NFCEE,
+        (WiredSeEvtData)NfcPkt((uint8_t*)p_data, data_len));
   }
   long value = 0;
   /* NXP Removal Detection timeout Config */
@@ -1448,6 +1465,12 @@ static void phNxpNciHal_read_complete(void* pContext,
           nxpncihal_ctrl.p_rx_data, nxpncihal_ctrl.rx_data_len);
       NXPLOG_NCIHAL_D("Mfc Response Status = 0x%x", mfcRspStatus);
       SEM_POST(&(nxpncihal_ctrl.ext_cb_data));
+    } else if (phNxpNciHal_WiredSeDispatchEvent(
+                   &gWiredSeHandle, NFC_PKT_RECEIVED,
+                   (WiredSeEvtData)NfcPkt(nxpncihal_ctrl.p_rx_data,
+                                          nxpncihal_ctrl.rx_data_len)) ==
+               NFCSTATUS_SUCCESS) {
+      NXPLOG_NCIHAL_D("%s => %d, Processed WiredSe Packet", __func__, __LINE__);
     }
     /* Read successful send the event to higher layer */
     else if (status == NFCSTATUS_SUCCESS) {
@@ -2302,6 +2325,8 @@ static void phNxpNciHal_core_initialized_complete(NFCSTATUS status) {
  *
  ******************************************************************************/
 int phNxpNciHal_pre_discover(void) {
+  phNxpNciHal_WiredSeDispatchEvent(&gWiredSeHandle, NFC_STATE_CHANGE,
+                                   (WiredSeEvtData)NfcState::NFC_ON);
   /* Nothing to do here for initial version */
   // This is set to return Failed as no vendor specific pre-discovery action is
   // needed in case of HalPrediscover
@@ -2362,6 +2387,8 @@ int phNxpNciHal_close(bool bShutdown) {
   if (gPowerTrackerHandle.stop != NULL) {
     gPowerTrackerHandle.stop();
   }
+  phNxpNciHal_WiredSeDispatchEvent(&gWiredSeHandle, NFC_STATE_CHANGE,
+                                   (WiredSeEvtData)NfcState::NFC_OFF);
   if (IS_CHIP_TYPE_L(sn100u)) {
     if (!(GetNxpNumValue(NAME_NXP_UICC_LISTEN_TECH_MASK, &uiccListenMask,
                          sizeof(uiccListenMask)))) {
diff --git a/snxxx/halimpl/hal/phNxpNciHal_WiredSeIface.cc b/snxxx/halimpl/hal/phNxpNciHal_WiredSeIface.cc
new file mode 100644
index 00000000..f7e2a2bf
--- /dev/null
+++ b/snxxx/halimpl/hal/phNxpNciHal_WiredSeIface.cc
@@ -0,0 +1,93 @@
+/*
+ * Copyright 2024 NXP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "phNxpNciHal_WiredSeIface.h"
+#include <phNxpNciHal.h>
+
+#include <dlfcn.h>
+
+#define TERMINAL_TYPE_ESE 0x01
+#define TERMINAL_TYPE_EUICC 0x05
+#define TERMINAL_TYPE_EUICC2 0x06
+
+/*******************************************************************************
+**
+** Function         phNxpNciHal_WiredSeStart()
+**
+** Description      Starts wired-se HAL. This is the first Api to be invoked.
+**                  Once it is started it will run throughout the process
+*lifecycle.
+**                  It is recommended to call from main() of service.
+**
+** Parameters       outHandle - Handle to the Wired SE subsystem.
+** Returns          NFCSTATUS_SUCCESS if WiredSe HAL is started.
+**                  NFCSTATUS_FAILURE otherwise
+*******************************************************************************/
+
+NFCSTATUS phNxpNciHal_WiredSeStart(WiredSeHandle* outHandle) {
+  if (outHandle == NULL) {
+    return NFCSTATUS_FAILED;
+  }
+  // Open WiredSe shared library
+  NXPLOG_NCIHAL_D("Opening (/vendor/lib64/WiredSe.so)");
+  outHandle->dlHandle = dlopen("/vendor/lib64/WiredSe.so", RTLD_NOW);
+  if (outHandle->dlHandle == NULL) {
+    NXPLOG_NCIHAL_E("Error : opening (/vendor/lib64/WiredSe.so) %s!!",
+                    dlerror());
+    return NFCSTATUS_FAILED;
+  }
+  outHandle->start =
+      (WiredSeStartFunc_t)dlsym(outHandle->dlHandle, "WiredSeService_Start");
+  if (outHandle->start == NULL) {
+    NXPLOG_NCIHAL_E("Error : Failed to find symbol WiredSeService_Start %s!!",
+                    dlerror());
+    return NFCSTATUS_FAILED;
+  }
+  outHandle->dispatchEvent = (WiredSeDispatchEventFunc_t)dlsym(
+      outHandle->dlHandle, "WiredSeService_DispatchEvent");
+  if (outHandle->dispatchEvent == NULL) {
+    NXPLOG_NCIHAL_E(
+        "Error : Failed to find symbol WiredSeService_DispatchEvent "
+        "%s!!",
+        dlerror());
+    return NFCSTATUS_FAILED;
+  }
+  NXPLOG_NCIHAL_D("Opened (/vendor/lib64/WiredSe.so)");
+  return outHandle->start(&outHandle->pWiredSeService);
+}
+
+/*******************************************************************************
+**
+** Function         phNxpNciHal_WiredSeDispatchEvent()
+**
+** Description      Dispatch events to wired-se subsystem.
+**
+** Parameters       outHandle - WiredSe Handle
+** Returns          NFCSTATUS_SUCCESS if success.
+**                  NFCSTATUS_FAILURE otherwise
+*******************************************************************************/
+NFCSTATUS phNxpNciHal_WiredSeDispatchEvent(WiredSeHandle* inHandle,
+                                           WiredSeEvtType evtType,
+                                           WiredSeEvtData evtData) {
+  if (inHandle == NULL || inHandle->dispatchEvent == NULL ||
+      inHandle->pWiredSeService == NULL) {
+    return NFCSTATUS_FAILED;
+  }
+  WiredSeEvt event;
+  event.eventData = evtData;
+  event.event = evtType;
+  return inHandle->dispatchEvent(inHandle->pWiredSeService, event);
+}
diff --git a/snxxx/halimpl/hal/phNxpNciHal_WiredSeIface.h b/snxxx/halimpl/hal/phNxpNciHal_WiredSeIface.h
new file mode 100644
index 00000000..8307b632
--- /dev/null
+++ b/snxxx/halimpl/hal/phNxpNciHal_WiredSeIface.h
@@ -0,0 +1,71 @@
+/*
+ * Copyright 2024 NXP
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#pragma once
+
+#include "WiredSeService.h"
+#include "phNfcStatus.h"
+
+#define NFCEE_ESE_ID 0xC0
+#define NFCEE_EUICC_ID 0xC1
+#define NFCEE_EUICC2_ID 0xC2
+#define NFCEE_INVALID_ID 0x00
+
+typedef int32_t (*WiredSeStartFunc_t)(WiredSeService** pWiredSeService);
+typedef int32_t (*WiredSeDispatchEventFunc_t)(WiredSeService* pWiredSeService,
+                                              WiredSeEvt event);
+
+/**
+ * Handle to the Power Tracker stack implementation.
+ */
+typedef struct {
+  // Function to start wired-se.
+  WiredSeStartFunc_t start;
+  // Function to dispatch events to wired-se subsystem.
+  WiredSeDispatchEventFunc_t dispatchEvent;
+  // WiredSeService instance
+  WiredSeService* pWiredSeService;
+  // WiredSe.so dynamic library handle.
+  void* dlHandle;
+} WiredSeHandle;
+
+/*******************************************************************************
+**
+** Function         phNxpNciHal_WiredSeStart()
+**
+** Description      Starts wired-se HAL. This is the first Api to be invoked.
+**                  Once it is started it will run throughout the process
+*lifecycle.
+**                  It is recommended to call from main() of service.
+**
+** Parameters       outHandle - Handle to the Wired SE subsystem.
+** Returns          NFCSTATUS_SUCCESS if WiredSe HAL is started.
+**                  NFCSTATUS_FAILURE otherwise
+*******************************************************************************/
+NFCSTATUS phNxpNciHal_WiredSeStart(WiredSeHandle* outHandle);
+
+/*******************************************************************************
+**
+** Function         phNxpNciHal_WiredSeDispatchEvent()
+**
+** Description      Dispatch events to wired-se subsystem.
+**
+** Parameters       inHandle - WiredSe Handle
+** Returns          NFCSTATUS_SUCCESS if success.
+**                  NFCSTATUS_FAILURE otherwise
+*******************************************************************************/
+NFCSTATUS phNxpNciHal_WiredSeDispatchEvent(
+    WiredSeHandle* inHandle, WiredSeEvtType evtType,
+    WiredSeEvtData evtData = WiredSeEvtData());
-- 
2.47.0

